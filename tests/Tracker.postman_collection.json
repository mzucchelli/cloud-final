{
	"info": {
		"_postman_id": "1824b425-bc63-40d3-8995-e45197063f68",
		"name": "Tracker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38512795"
	},
	"item": [
		{
			"name": "Get Trades",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a non-empty array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(0, \"Should be an array\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema matches the expected schema for an empty array\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{tradeEndpoint}}",
					"host": [
						"{{tradeEndpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.inserted_id).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Inserted_id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.inserted_id).to.be.a('number');\r",
							"    pm.expect(responseData.inserted_id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"// Stores the inserted_id in a global variable for future use\r",
							"var insertedId = pm.response.json().inserted_id;\r",
							"pm.collectionVariables.set(\"tradeId\", insertedId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ticker\": \"AMD\",\r\n    \"price\": 110,\r\n    \"shares\": 10,\r\n    \"time\":\" 2024-10-19 9:45:27\",\r\n    \"comments\": \"short\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tradeEndpoint}}",
					"host": [
						"{{tradeEndpoint}}"
					]
				},
				"description": "post"
			},
			"response": []
		},
		{
			"name": "Update Trade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the correct Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Response schema validation for required fields and data types\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"    \r",
							"//     pm.expect(responseData).to.be.an('object');\r",
							"//     pm.expect(responseData).to.have.property('requiredField1').that.is.a('string');\r",
							"//     pm.expect(responseData).to.have.property('requiredField2').that.is.a('number');\r",
							"//     pm.expect(responseData).to.have.property('requiredField3').that.is.an('array');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{tradeId}},\r\n    \"ticker\": \"AMD\",\r\n    \"price\": 110,\r\n    \"shares\": 20,\r\n    \"time\":\" 2024-10-19 9:45:27\",\r\n    \"comments\": \"short\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tradeEndpoint}}",
					"host": [
						"{{tradeEndpoint}}"
					]
				},
				"description": "post"
			},
			"response": []
		},
		{
			"name": "Delete Trade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in JSON format\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body matches the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.eql({});\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{tradeEndpoint}}{{tradeId}}",
					"host": [
						"{{tradeEndpoint}}{{tradeId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tradeEndpoint",
			"value": "http://localhost:3000/api/v0/trades/",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "tradeId",
			"value": "",
			"type": "string"
		}
	]
}